#####################################################################
#   BME680
#####################################################################

# The macro below assumes you have a BME280 sensor_type defined in one
# of the applicable sections in printer.cfg, such as:
#
#[temperature_sensor my_sensor]
#sensor_type: BME280
#gcode_id: AMB
#
# Note the format of the parameter SENSOR in the macro below.  The BME280
# sensor status can be accessed using the format "bme280 <section_name>".
# The example section above is named "my_sensor", thus the bme280 can be
# queried as follows:
#
# QUERY_BME280 SENSOR='bme280 my_sensor'
#
# Since a default parameter is defined one could simply enter QUERY_BME280
# as well.

#[gcode_macro QUERY_BME280]
#gcode:
#    {% set sensor = printer["bme280 my_sensor"] %}
#    {action_respond_info(
#        "Temperature: %.2f C\n"
#        "Pressure: %.2f hPa\n"
#        "Humidity: %.2f%%" % (
#            sensor.temperature,
#            sensor.pressure,
#            sensor.humidity))}

#####################################################################
#   Pressure Advance
#####################################################################

# [gcode_macro TEMPADJUSTPA]
# gcode:
#     # PC
#     {% if printer.heater_bed.target >= 100 %}
#         SET_PRESSURE_ADVANCE ADVANCE=0.0475    
#     ## ABS
#     {% elif printer.heater_bed.target > 85 and printer.heater_bed.target < 92 %}
#        SET_PRESSURE_ADVANCE ADVANCE=0.04
#     ## PETG
#     {% elif printer.heater_bed.target > 65 and printer.heater_bed.target < 85 %}
#        SET_PRESSURE_ADVANCE ADVANCE=0.045
#     # PLA
#     {% elif printer.heater_bed.target <= 65 %}
#         SET_PRESSURE_ADVANCE ADVANCE=0.03
#     # Catch-all
#     {% else %}
#         SET_PRESSURE_ADVANCE ADVANCE=0.05
#     {% endif %}

#####################################################################
#   Print Start / End
#####################################################################

[gcode_macro G32]
gcode:
    G28
    STATUS_LEVELING
    BED_MESH_CLEAR
    QUAD_GANTRY_LEVEL
    G28 Z
   
[gcode_macro PRINT_START]
# For setting the parameters as persistent variables so they can be referenced in PRINT_START2
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
gcode:      
    # Parameters
    {% set bed = params.BED|int %}
    {% set hotend = params.HOTEND|int %}
    {% set chamber = params.CHAMBER|default(0)|int %}
    
    # Set the parameters as persistent variables so they can be referenced outside of the macro (in PRINT_END)
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed}   
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={hotend} 
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={chamber}   

    UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=0                                       ; cancel exhaust off timer (if there is one)
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0                                       ; cancel off timer (if there is one)
    #SET_PIN PIN=caselight VALUE=1                                                        ; turn on case light
    STATUS_HEATING                                                                       ; set SB LED to heating
    RESETSPEEDS                                                                          ; reset speed, accel etc to configured values
    M104 S150                                                                            ; set hotend to no-ooze temp
    M140 S{bed}                                                                          ; set bed to target temp
    G28                                                                                  ; home
    G90                                                                                  ; absolute positioning
    {% if printer["temperature_sensor chamber"].temperature < chamber %}                 ; - if chamber is not at temp yet:
        HEATSOAK T={bed} MOVE=2                                                          ;   heatsoak macro + park in center
        M190 S{bed}                                                                      ;   wait for bed final temp
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chamber}           ;   wait for chamber final temp
        M84
    {% else %}                                                                           ; - if chamber is already at temp:
        {% if printer.heater_bed.temperature < (bed-2) %}                                ; -- but bed is not fully heated (within 2C):
            HEATSOAK T={bed} MOVE=2                                                      ;       heatsoak and park
            M190 S{bed}                                                                  ;       wait for bed final temp
            M84
        {% else %}                                                                       ; -- and bed is already heated:
            HEATSOAK T={bed} MOVE=0                                                      ;       "heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
            M84
        {% endif %}
    {% endif %} 
    CG28
    M106 S0                                                                              ; turn off part cooling fan (from heatsoak)
    NOZZLECLEAN
    STATUS_READY                                                                         ; set SB LED to ready
    BED_MESH_CLEAR                                                                       ; clear bed mesh
    QUAD_GANTRY_LEVEL                                                                    ; quad gantry level
    G28 Z                                                                                ; home z
    G90                                                                                  ; absolute positioning
    BED_MESH_CALIBRATE                                                                   ; mesh
    #CG28                                                                                 ; home z again
    G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_minimum.y} Z5 F19500   ; move nozzle near Z3
    M109 S{hotend}                                                                       ; set & wait for hotend final temp
    #TEMPADJUSTPA                                                                         ; change PA based on bed temp    
    #NOZZLECLEAN                                                                          ; clean nozzle while hot
    PRIME_LINE
    STATUS_PRINTING                                                                      ; set SB LED to print
    #SET_PIN PIN=caselight VALUE=1                                                        ; turn on case light
    #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                                  ; enable filament sensor

[gcode_macro PRINT_END]
gcode:
    #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
    CLEAR_PAUSE                                                                          ; clear pause (from M191) if there is one
    {% if printer.heater_bed.temperature >= 100 %}                                       
        SET_FAN_SPEED FAN=Exhaust SPEED=1                                                ; crank exhaust fan to 100% to evacuate chamber
    {% endif %}                                                 
    M400                                                                                 ; wait for buffer to clear
    G92 E0                                                                               ; zero the extruder
    M104 S0                                                                              ; turn only the hotend off
    M140 S{printer["gcode_macro PRINT_START"].bedtemp|int-10}                            ; return the bed to temp, some slicers like to turn it off
    M107                                                                                 ; turn off part cooling fan
    G91                                                                                  ; relative positioning
    G1 E-5.0 F1800                                                                       ; retract filament
    G1 Z5 F3000                                                                          ; move nozzle up 5mm
    G90                                                                                  ; absolute positioning
    G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F19500 ; park nozzle at front  #19500
    #FILAMENT_UNLOAD
    #BED_MESH_CLEAR                                                                       ; clear bed mesh                                    
    UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=120                                     ; turn exhaust off in 2 min
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=7200                                    ; turn everything off in 30 min
    RESETSPEEDS                                                                          ; reset speed, accel etc to configured max values
    #SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0                                       ; disable XYE steppers (not z)
    #SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0
    #SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    STATUS_BUSY                                                                          ; set SB LED to busy
    #SET_PIN PIN=caselight VALUE=.4                                                       ; turn on case light
	
[delayed_gcode EXHAUST_OFF]
gcode:
    SET_FAN_SPEED FAN=Exhaust SPEED=0

[delayed_gcode DELAYED_OFF]
gcode:
    OFF ; call "OFF" macro, to turn off everything (heaters, motors, lights, fans)

[gcode_macro PRIME_LINE]
gcode: 
    G92 E0 ;Reset Extruder
    # move z axis 
    G1 Z2.0 F3000                                                                                  ;Move Z Axis up
    # move to prime position 
    G1 X{printer.toolhead.axis_maximum.x-20} Y{printer.toolhead.axis_minimum.y} Z0.2 F19500        ; move to start position  #19500
    G1 X{printer.toolhead.axis_minimum.x+5} Y{printer.toolhead.axis_minimum.y} Z0.2 F1500 E15      ; draw the first line
    G92 E0                                                                                         ; Reset Extruder
    G1 Z2.0 F3000                                                                                  ; Move Z Axis up

#####################################################################
#   Print Pause / Resume / Cancel
#####################################################################

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

# Pause and park toolhead at front center. Z hop by 10mm.
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                  ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                             ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}   ; set hotend temp variable for reference in resume macro
                                
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                 ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                         ; save current print position for resume                
        BASE_PAUSE                                                                          ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}      ; check that zhop doesn't exceed z max
            G91                                                                             ; relative positioning
            G1 Z{z} F900                                                                    ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                 ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                 ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F19500 ; park toolhead at front center  #19500
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                     ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                             ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                      ; set timeout to 12 hours
    {% endif %}

# Return Z hop back down, prime nozzle, resume print.
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                                                              ; enable filament sensor
        #RESETRGB                                                                                                         ; reset LCD color
        #SET_LOGO_LEDS_BY_NAME COLOR="WHITE"                                                                              ; set logo LEDs back to white
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                      ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                                                            ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                                                         ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                                                              ; relative positioning
        M83                                                                                                              ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                             
            G1 Z{zhop * -1} E{e} F900                                                                                    ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                                                         ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=100                                                             ; restore position
        BASE_RESUME                                                                                                      ; resume print
    {% endif %}

# Filament runout / change alias    
[gcode_macro M600]
gcode:
    #LCDRGB R=0 G=1 B=0                  # Turn LCD green
    #SET_LOGO_LEDS_BY_NAME COLOR="GREEN" # Turn logo green
    PAUSE
    
# Disable filament sensor 1 sec after startup, only enable during prints (in PRINT_START/PRINT_END, and in PAUSE/RESUME)
#[delayed_gcode DISABLEFILAMENTSENSOR]   
#initial_duration: 10
#gcode:
    #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

#####################################################################
#   Clean Nozzle & Swipe Nozzle
#####################################################################

[gcode_macro NOZZLECLEAN]
variable_start_x: 0
variable_start_y: 305
variable_start_z: -.4
variable_wipe_dist: 60
variable_wipe_qty: 10
variable_wipe_spd: 200
variable_raise_distance: 10

gcode:
 
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 
 G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500
 STATUS_CLEANING
 #SET_PIN PIN=caselight VALUE=1                  ; turn light on
 G90                                            ; absolute positioning
 ## Move nozzle to start position
 G1 X{start_x} Y{start_y} F6000
 G1 Z{start_z} F1500

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   G1 X{start_x + wipe_dist} F{wipe_spd * 60}
   G1 X{start_x} F{wipe_spd * 60}
 {% endfor %}
 
 G1 Z{raise_distance}                           ; Raise nozzle
 G1 Y{start_y - 10}
 #SET_PIN PIN=caselight VALUE=0                  ; turn light off

[gcode_macro NOZZLESWIPE]
variable_start_x: 0
variable_start_y: 305
variable_start_z: -.4
variable_wipe_dist: 60
variable_wipe_qty: 1
variable_wipe_spd: 200
variable_raise_distance: 10

gcode:
 
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 
 G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500
 STATUS_CLEANING 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
 G1 X{start_x} Y{start_y} F6000
 G1 Z{start_z} F1500

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   G1 X{start_x + wipe_dist} F{wipe_spd * 60}
   G1 X{start_x} F{wipe_spd * 60}
 {% endfor %}
 
 G1 Z{raise_distance}                           ; Raise nozzle
 G1 Y{start_y - 10}

#####################################################################
#   Filament
#####################################################################

[gcode_macro FILAMENT_UNLOAD]
gcode:
    SAVE_GCODE_STATE NAME=FILAMENTUNLOAD
    STATUS_READY                          ; set SB LED to ready    
    M83                                   ; set extruder to relative
    G1 E10 F600                           ; extrude a little to soften tip 
    G1 E-120 F1800                        ; retract filament completely
    RESTORE_GCODE_STATE NAME=FILAMENTUNLOAD

[gcode_macro FILAMENT_LOAD]
gcode:
    SAVE_GCODE_STATE NAME=FILAMENTLOAD
    STATUS_READY                          ; set SB LED to ready    
    M83                                   ; set extruder to relative 
    G1 E140 F600                           ; extrude filament completely
    RESTORE_GCODE_STATE NAME=FILAMENTLOAD
   
[gcode_macro HOT_UNLOAD]
gcode:
    # Parameters
    {% set t = params.T|default(240)|int %}
    
    M104 S{t}
    PARKFRONT
    STATUS_HEATING                        ; set SB LED to heating    
    M109 S{t}
    FILAMENT_UNLOAD
    
[gcode_macro HOT_LOAD]
gcode:
    # Parameters
    {% set t = params.T|default(240)|int %}
    
    M104 S{t}
    PARKFRONT
    STATUS_HEATING                        ; set SB LED to heating    
    M109 S{t}
    FILAMENT_LOAD

#####################################################################
#   Conditional Homing
#####################################################################

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    STATUS_HOMING
    
# Conditional G28 (home if not already homed)
[gcode_macro CXYG28]
gcode:
    {% if "xy" not in printer.toolhead.homed_axes %}
        G28 X Y
    {% endif %}
    STATUS_HOMING

[gcode_macro CZG28]
gcode:
    {% if "z" not in printer.toolhead.homed_axes %}
        G28 Z
    {% endif %}
    STATUS_HOMING

#####################################################################
#   Parking
#####################################################################

# Park front center
[gcode_macro PARKFRONT]
gcode:
    CG28
    STATUS_READY
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} Z{printer.toolhead.axis_maximum.z/2} F19500 #19500        
    RESTORE_GCODE_STATE NAME=PARKFRONT
    
# Park front center, but low down
[gcode_macro PARKFRONTLOW]
gcode:
    CG28
    STATUS_READY
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} Z20 F19500 #19500
    RESTORE_GCODE_STATE NAME=PARKFRONT
    
# Park top rear left
[gcode_macro PARKREAR]
gcode:
    CG28
    STATUS_READY
    SAVE_GCODE_STATE NAME=PARKREAR
    G90
    G0 X{printer.toolhead.axis_minimum.x/2} Y{printer.toolhead.axis_maximum.y-20} Z{printer.toolhead.axis_maximum.z-50} F19500 #19500     
    RESTORE_GCODE_STATE NAME=PARKREAR

# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
    CG28
    STATUS_READY
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500 #19500   
    RESTORE_GCODE_STATE NAME=PARKCENTER

# Park center of build volume
[gcode_macro PARKTOP]
gcode:
    CG28
    STATUS_READY
    SAVE_GCODE_STATE NAME=PARKTOP
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z*3/4} F19500  #19500   
    RESTORE_GCODE_STATE NAME=PARKTOP

# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    CG28
    STATUS_READY
    SAVE_GCODE_STATE NAME=PARKBED
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F19500 #19500                                     
    RESTORE_GCODE_STATE NAME=PARKBED
#####################################################################
#   Alias/Shortcuts
#####################################################################

[gcode_macro QGL]
gcode:
    BED_MESH_CLEAR
    QUAD_GANTRY_LEVEL
    STATUS_LEVELING
    
[gcode_macro BMC]
gcode:
    BED_MESH_CALIBRATE
    STATUS_MESHING

# Just a shortcut to turn EVERYTHING off with one command (beds, heaters, motors, lights)
[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    M107                                 ; turn print cooling fan off
    SET_FAN_SPEED FAN=Exhaust SPEED=0    ; turn exhaust fan off
    SET_FAN_SPEED FAN=bedfans SPEED=0    ; bed fan off
    STATUS_OFF                           ; turn sb LED off
    #SET_PIN PIN=caselight VALUE=0        ; turn light off

#####################################################################
#   Misc
#####################################################################

[gcode_macro RESETSPEEDS]
gcode:
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 

[gcode_macro HEATSOAK]
gcode:
    # Parameters
    {% set t = params.T|default(110)|int %}
    {% set move = params.MOVE|default(1)|int %}#
  #  {% set period = params.PERIOD|default(20)|int %} ## minutes

    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0  ; cancel off timer (if there is one)
    SET_FAN_SPEED FAN=Exhaust SPEED=0               ; turn off exhaust fan
    #SET_PIN PIN=caselight VALUE=1                   ; turn on case light
    STATUS_HEATING                                  ; set SB LED to heating
    M140 S{t}                                       ; heat bed
    {% if t >= 100 %}
        M104 S150                                   ; set hotend to no-ooze temp
        M106 S205                                   ; turn on part fan (80%)
        PARKBED   
    {% else %}
        M106 S0                                     ; turn part fan off
    {% endif %}
    {% if move == 1 %}
        CG28                                        ; conditional home
        PARKTOP                                     ; move to centertop
    {% elif move == 2 %}
        CG28                                        ; conditional home
        PARKCENTER                                  ; move to center
    {% endif %}
 #   {% if period >= 30 %}
 #       M84
 #       G4 P{period*1000*60}                        ; dwell for specified duration
 #   {% else %}
 #       G4 P{period*1000*60}                        ; dwell for specified duration
 #   {% endif %}

[gcode_macro ZUP]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.01 MOVE=1

[gcode_macro ZDOWN]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1

[gcode_macro PID_HOTEND]
gcode:

    # Parameters
    {% set t = params.T|default(245)|int %}

    CG28
    STATUS_READY
    SAVE_GCODE_STATE NAME=PID_HOTEND
    G90
    PARKBED
    M106 S64
    PID_CALIBRATE HEATER=extruder TARGET={t}
    RESTORE_GCODE_STATE NAME=PID_HOTEND

[gcode_macro QGL_ACCURACY]
gcode:

  G1 Z10
  G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2}
  PROBE_ACCURACY  
  # G1 X50 Y25 F10000
  # PROBE_ACCURACY
  # G1 X50 Y225 F10000
  # PROBE_ACCURACY
  # G1 X250 Y225 F10000
  # PROBE_ACCURACY
  # G1 X250 Y25 F10000
  # PROBE_ACCURACY
  # G1 Z10

# Cancel object (aka Marlin/RRF M486 commands) support
#
# Enable object exclusion
#[exclude_object]

#[gcode_macro M486]
#gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

#  {% if 'exclude_object' not in printer %}
#    {action_raise_error("[exclude_object] is not enabled")}
#  {% endif %}

#  {% if 'T' in params %}
#    EXCLUDE_OBJECT RESET=1

#    {% for i in range(params.T | int) %}
#      EXCLUDE_OBJECT_DEFINE NAME={i}
#    {% endfor %}
#  {% endif %}

#  {% if 'C' in params %}
#    EXCLUDE_OBJECT CURRENT=1
#  {% endif %}

#  {% if 'P' in params %}
#    EXCLUDE_OBJECT NAME={params.P}
#  {% endif %}

#  {% if 'S' in params %}
#    {% if params.S == '-1' %}
#      {% if printer.exclude_object.current_object %}
#        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
#      {% endif %}
#    {% else %}
#      EXCLUDE_OBJECT_START NAME={params.S}
#    {% endif %}
#  {% endif %}

#  {% if 'U' in params %}
#    EXCLUDE_OBJECT RESET=1 NAME={params.U}
#  {% endif %}